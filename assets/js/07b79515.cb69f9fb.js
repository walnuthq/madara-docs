"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4933],{8851:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"chain/architecture","title":"Architecture","description":"Overview","source":"@site/docs/chain/architecture.md","sourceDirName":"chain","slug":"/chain/architecture","permalink":"/madara-docs/chain/architecture","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"defaultSidebar","previous":{"title":"Chain operators","permalink":"/madara-docs/category/chain-operators"},"next":{"title":"Overview","permalink":"/madara-docs/chain/overview"}}');var i=n(4848),a=n(8453);const o={sidebar_position:1},s="Architecture",c={},l=[{value:"Overview",id:"overview",level:2},{value:"L2 or L3",id:"l2-or-l3",level:2},{value:"Transaction flow",id:"transaction-flow",level:2}];function h(e){const r={h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(r.p,{children:"A Madara blockchain consists of the following components:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"A gateway"}),"\n",(0,i.jsx)(r.li,{children:"A sequencer"}),"\n",(0,i.jsx)(r.li,{children:"An orchestrator"}),"\n",(0,i.jsx)(r.li,{children:"Nodes"}),"\n",(0,i.jsx)(r.li,{children:"Starknet OS (SNOS)"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"Furthermore, the following parties should be present:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Users issuing transactions"}),"\n",(0,i.jsx)(r.li,{children:"A data availability layer"}),"\n",(0,i.jsx)(r.li,{children:"A settlement layer"}),"\n",(0,i.jsx)(r.li,{children:"A prover"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"l2-or-l3",children:"L2 or L3"}),"\n",(0,i.jsx)(r.p,{children:"Madara can launch either a Starknet clone (a L2 network) or a new network on top of a Starknet network, which is also called an Application Chain (App Chain, L3). The basic functionality remains mostly the same, the main difference is the settlement layer."}),"\n",(0,i.jsx)(r.h2,{id:"transaction-flow",children:"Transaction flow"}),"\n",(0,i.jsx)(r.p,{children:"TODO: the text is incorrect, the image is closer to reality. fix the text"}),"\n",(0,i.jsx)(r.p,{children:"When a user issues a transaction it goes through the components in the following way:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"The transaction is received by the gateway and is forwarded to the orchestrator"}),"\n",(0,i.jsx)(r.li,{children:"The orchestrator assigns the transaction to the sequencer"}),"\n",(0,i.jsx)(r.li,{children:"The sequencer adds the transaction to a block"}),"\n",(0,i.jsx)(r.li,{children:"Once a block is ready, the sequencer executes the block using Starknet OS (SNOS), which generates an execution trace and state diffs (depicting what state changes the block's transactions caused in the blockchain)"}),"\n",(0,i.jsx)(r.li,{children:"The sequencer publishes the block's transaction data and state diffs to a Data Availability (DA) layer."}),"\n",(0,i.jsx)(r.li,{children:"The sequencer forwards the block's execution trace to a prover"}),"\n",(0,i.jsx)(r.li,{children:"The prover generates a cryptographic proof of correctness of the block."}),"\n",(0,i.jsx)(r.li,{children:"The proof is sent to the L1 Settlement Layer verifier contract for verification."}),"\n",(0,i.jsx)(r.li,{children:"The orchestrator monitors the L1 verifier contract and finalizes the block if the proof is valid."}),"\n"]}),"\n",(0,i.jsx)(r.mermaid,{value:"sequenceDiagram\n\n    participant Orchestrator\n    participant Sequencer as Madara (Sequencer)\n    participant SNOS as Starknet OS (SNOS)\n    participant Prover\n    participant L1_Verifier as L1 Settlement Layer Verifier\n\n    Note over Sequencer: Madara in Sequencer mode (Solo chain) does not need SNOS.\n\n    Orchestrator ->> Sequencer: Receive transactions\n    Sequencer ->> Sequencer: Execute transactions & generate state diff\n    Sequencer ->> Sequencer: Assemble full block\n    Sequencer ->> Sequencer: Add block to L2 (Accepted in L2)\n\n    Note over Orchestrator: SNOS is only used in Appchain mode\n\n    Orchestrator ->> SNOS: Request proof for block N\n    SNOS ->> Sequencer: Query block data, transactions, state diffs, state roots\n    Note over SNOS, Sequencer: (If storage proof is needed, query Pathfinder)\n    SNOS ->> Orchestrator: Generate proof input\n    Orchestrator ->> Prover: Forward proof input for proving\n    Prover ->> L1_Verifier: Send proof for verification\n    L1_Verifier ->> Orchestrator: Proof verification result\n    Orchestrator ->> Orchestrator: Finalize block if valid\n"}),"\n",(0,i.jsx)(r.p,{children:"What else?"})]})}function d(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>s});var t=n(6540);const i={},a=t.createContext(i);function o(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);